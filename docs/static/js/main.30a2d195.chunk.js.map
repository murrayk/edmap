{"version":3,"sources":["components/InfoBox.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","info","className","title","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","lastSelectedBuilding","hoveredObject","App","state","layers","GeoJsonLayer","id","data","opacity","stroked","filled","extruded","wireframe","getElevation","d","otherTags","properties","other_tags","console","log","process","match","Number","getBuildingElevation","getFillColor","selected","updateTriggers","this","getLineColor","onClick","event","object","setState","getInfo","pickable","initialViewState","controller","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAceA,G,OAXC,SAAC,GAAa,IAAXC,EAAU,EAAVA,KAEf,OACI,yBAAKC,UAAU,gBACf,yBAAKA,UAAU,cAAf,iBACeD,EAAKE,U,OCC5B,IAcMC,EAAqB,CACzBC,WAAY,UACZC,SAAU,WACVC,KAAM,GACNC,MAAO,EACPC,QAAS,GAePC,EAAuB,CAACC,cAAe,M,IAqCtBC,E,4MACnBC,MAAQ,CACNV,MAAO,6C,uDAIC,IAAD,OA2DDW,EAAS,CA7BQ,IAAIC,IAAa,CACtCC,GAAI,UACJC,KA7GW,2BA8GXC,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,WAAW,EACXC,aAAc,SAAAC,GACZ,OAAiC,EA9DzC,SAA8BP,GAC5B,IAAIQ,EAAYR,EAAKS,WAAWC,WAEhC,GADAC,QAAQC,IAAIC,qHACRL,EAAW,CACbG,QAAQC,IAAI,mCACZD,QAAQC,IAAIZ,EAAKS,WAAWC,YAC5B,IACMI,EAAQN,EAAUM,MADM,+BAE9B,OAAIA,EACKC,OAAOD,EAAM,IAEb,GAmDEE,CAAqBT,IAE9BU,aAAc,SAAAV,GAGZ,OAFAI,QAAQC,IAAI,8BAAgCL,EAAEE,WAAWV,IACzDY,QAAQC,IAAI,YAAcL,EAAEE,WAAWS,UAChCX,EAAEE,WAAWS,SAAW,CAAC,IAAK,IAAK,KAAO,CAAC,GAAI,IAAK,MAE7DC,eAAgB,CACdF,aAAc,CACZG,KAAKxB,MAAMF,cACP0B,KAAKxB,MAAMF,cAAce,WAAWV,GACpC,OAGRsB,aAAc,CAAC,IAAK,IAAK,KACzBC,QAAS,SAACC,GAAD,OAlDK,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjBb,QAAQC,IAAIY,GACRA,KACiC,IAA/BA,EAAOf,WAAWS,UACsB,OAAvCzB,EAAqBC,gBACtBD,EAAqBC,cAAce,WAAWS,UAAW,GAE3DM,EAAOf,WAAWS,UAAW,EAC7BzB,EAAqBC,cAAgB8B,GAErCA,EAAOf,WAAWS,UAAW,EAE/B,EAAKO,SAAS,CAAE/B,cAAe8B,EAAQtC,MAAOsC,EAAOf,WAAWzB,QAsC9C0C,CAAQH,IAC5BI,UAAU,KAUZ,OACE,kBAAC,IAAD,CACEC,iBAAkBzC,EAClB0C,YAAY,EACZhC,OAAQA,GAGR,kBAAC,IAAD,CACEiC,WAAS,EACTC,SA5IR,uBA6IQC,qBAAqB,EACrBC,qBApJW,IAsJX,kBAAC,EAAD,CAASjD,KAAMoC,KAAKxB,c,GApFGsC,aCpEbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCZNyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.30a2d195.chunk.js","sourcesContent":["import React from \"react\";\nimport '../App.css';\n\nconst InfoBox = ( {info}) => {\n\n    return(\n        <div className=\"ui container\">\n        <div className=\"ui segment\">\n        Hello Murray 2{info.title}\n        </div>\n        </div>\n    )\n};\n\nexport default InfoBox;","import React, { useContext, setState, Component } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { LineLayer } from '@deck.gl/layers';\nimport { GeoJsonLayer, PolygonLayer } from \"deck.gl\";\nimport { StaticMap } from 'react-map-gl';\nimport InfoBox from './components/InfoBox'\nimport { InfoContext } from \"./providers/InfoContext\";\nimport { getJSONData } from \"./DataLoader\";\n\nconst DATA_URL = 'edinburgh-buildings.json';\n\n// Set your mapbox access token here\n//const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoibXVycmF5aGtpbmciLCJhIjoiZVVfeGhqNCJ9.WJaoPywqu21-rgRkQJqsKQ';\n// Set your mapbox token here\nconst MAPBOX_TOKEN = ''; // eslint-disable-line\n// mapbox style file path\nconst MAPBOX_STYLE =\n  'https://murrayk.github.io/london3dmap/london-style.json';\n\nconst MAPBOX_STYLE_EDINBURGH =\n  'style-edinburgh.json';\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: -3.1543883,\n  latitude: 55.9556674,\n  zoom: 13,\n  pitch: 0,\n  bearing: 0\n};\n\nvar features = {\n  \"type\": \"FeatureCollection\",\n  \"name\": \"multipolygons\",\n  \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\n  \"features\": [\n  { \"type\": \"Feature\", \"properties\": { id:1, selected:false, \"osm_way_id\": \"77869807\", \"building\": \"yes\", \"info\": \"Owner Joe Bloggs First Floor\"  ,\"other_tags\": \"\\\"building:levels\\\"=>\\\"6\\\",\\\"wikidata\\\"=>\\\"Q7309422\\\"\" }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [ -3.1517904, 55.9557288 ], [ -3.1517529, 55.9557268 ], [ -3.1517617, 55.9556757 ], [ -3.1512664, 55.9556491 ], [ -3.1512644, 55.9556612 ], [ -3.1510791, 55.9556513 ], [ -3.1511316, 55.9553431 ], [ -3.1511237, 55.9553195 ], [ -3.1510771, 55.955317 ], [ -3.1510304, 55.9553145 ], [ -3.1510263, 55.9553384 ], [ -3.1509417, 55.9553339 ], [ -3.1508914, 55.9556274 ], [ -3.1505404, 55.9556086 ], [ -3.1505378, 55.9556236 ], [ -3.1505032, 55.9556218 ], [ -3.1504952, 55.9556689 ], [ -3.1505297, 55.9556707 ], [ -3.1505213, 55.9557201 ], [ -3.1508698, 55.9557388 ], [ -3.1508566, 55.9558156 ], [ -3.1508205, 55.9560265 ], [ -3.1508188, 55.9560369 ], [ -3.1508441, 55.9560383 ], [ -3.1508419, 55.956051 ], [ -3.150903, 55.9560543 ], [ -3.150905, 55.9560429 ], [ -3.1509171, 55.9560436 ], [ -3.1509191, 55.9560314 ], [ -3.1510083, 55.9560362 ], [ -3.1510571, 55.9557515 ], [ -3.1517465, 55.9557885 ], [ -3.1517482, 55.9557786 ], [ -3.1517642, 55.9557794 ], [ -3.151766, 55.9557688 ], [ -3.1517834, 55.9557697 ], [ -3.1517904, 55.9557288 ] ] ] ] } },\n  { \"type\": \"Feature\", \"properties\": { id:2, selected:false, \"osm_way_id\": \"477670604\", \"building\": \"yes\", \"other_tags\": \"\\\"building:levels\\\"=>\\\"3\\\"\" }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [ -3.1513162, 55.9553529, 100 ], [ -3.1512742, 55.9553507, 100 ], [ -3.1511316, 55.9553431, 100 ], [ -3.1510791, 55.9556513, 100 ], [ -3.1512644, 55.9556612, 100 ], [ -3.1512664, 55.9556491, 100 ], [ -3.1513162, 55.9553529, 100 ] ] ] ] } }\n  \n  ]\n  };\n  \nvar last_selected = 1000;\nvar lastSelectedBuilding = {hoveredObject: null};\n// Data to be used by the LineLayer\nconst data = [\n  { sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781] }\n];\n\nconst polygonData = [\n  {\n    contours: [\n      [-91.72307036099997, 31.814196736000035],\n      [-122.41669, 37.781],\n      [-95.52274057225983, 30.131426214982195],\n      [-91.72307036099997, 31.814196736000035]\n    ],\n    name: \"firstPolygon\",\n    elevation: 10000\n  }\n];\n\n\nfunction getBuildingElevation(data) {\n  let otherTags = data.properties.other_tags;\n  console.log(process.env);\n  if (otherTags) {\n    console.log(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\");\n    console.log(data.properties.other_tags);\n    const extractBuildingHeight = /building:levels\"=>\"([0-9]+)/;\n    const match = otherTags.match(extractBuildingHeight);\n    if (match) {\n      return Number(match[1]);\n    } else {\n      return 1;\n    }\n  }\n\n}\n\nexport default class App extends Component {\n  state = {\n    title: \"aaxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  };\n\n\n  render() {\n    let data = DATA_URL;\n    let mapStyle = MAPBOX_STYLE_EDINBURGH;\n\n    const getInfo = ({ object }) => {\n      console.log(object);\n      if (object) {\n        if (object.properties.selected === false) {\n          if(lastSelectedBuilding.hoveredObject !== null ) {\n            lastSelectedBuilding.hoveredObject.properties.selected = false;\n          }\n          object.properties.selected = true;\n          lastSelectedBuilding.hoveredObject = object;\n        } else {\n          object.properties.selected = false;\n        }\n        this.setState({ hoveredObject: object, title: object.properties.info });\n      }\n      \n      // console.log(object);\n      // console.log(\"PROCESS\");\n      // console.log(this);\n\n      // setInfo(before => { \n      //   console.log(\"before\");\n      //   console.log(before);\n      //   return {title: title};\n      // });\n    }\n\n    const GEO_JSON_LAYER = new GeoJsonLayer({\n      id: 'geojson',\n      data,\n      opacity: 0.8,\n      stroked: false,\n      filled: true,\n      extruded: true,\n      wireframe: true,\n      getElevation: d => {\n        return getBuildingElevation(d) * 3;\n      },\n      getFillColor: d => {\n        console.log(\"updating fill color for id \" + d.properties.id);\n        console.log(\"selected \" + d.properties.selected );\n        return d.properties.selected ? [100, 105, 155] : [55, 205, 155]\n      },\n      updateTriggers: {\n        getFillColor: [\n          this.state.hoveredObject\n            ? this.state.hoveredObject.properties.id\n            : null\n        ]\n      },\n      getLineColor: [255, 255, 255],\n      onClick: (event) => getInfo(event),\n      pickable: true\n    })\n\n\n    const layers = [\n      GEO_JSON_LAYER\n    ];\n\n\n\n    return (\n      <DeckGL\n        initialViewState={INITIAL_VIEW_STATE}\n        controller={true}\n        layers={layers}\n      >\n\n        <StaticMap\n          reuseMaps\n          mapStyle={mapStyle}\n          preventStyleDiffing={true}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        >\n          <InfoBox info={this.state} /></StaticMap>\n\n      </DeckGL>\n    );\n  }\n}\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}