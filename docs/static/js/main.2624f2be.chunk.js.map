{"version":3,"sources":["components/InfoBox.js","components/AboutBox.js","layers/LayersFactory.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","info","className","title","AboutBox","props","style","position","zIndex","onClick","goToBridges","goToRos","LayersFactory","getBridgesLayer","ScenegraphLayer","id","data","pickable","scenegraph","getPosition","d","console","log","coordinates","getOrientation","sizeScale","_lighting","getColor","c","getRosBuilding","updateSelectedBuilding","getSelectedBuildingId","GeoJsonLayer","opacity","stroked","filled","extruded","wireframe","getElevation","otherTags","properties","other_tags","process","match","Number","getBuildingElevation","getFillColor","updateTriggers","getLineColor","event","object","selectedBuildingId","selectBuildingOrFloor","registerLoaders","GLTFLoader","App","layersFactory","state","initialViewState","longitude","latitude","zoom","pitch","bearing","layers","setState","transitionDuration","transitionInterpolator","FlyToInterpolator","buildingDetails","this","controller","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2624f2be.chunk.js","sourcesContent":["import React from \"react\";\nimport '../App.css';\n\nconst InfoBox = ( {info}) => {\n\n    return(\n        <div className=\"ui container\" >\n        <div className=\"ui segment\">\n        {info.title}\n        </div>\n        </div>\n    )\n};\n\nexport default InfoBox;","import React from \"react\";\nimport '../App.css';\n\n\n\n\nconst AboutBox = (props) => {\n\n    return (\n\n        <div className=\"ui two column  raised padded text container segment grid\" style={{position: 'absolute', zIndex: 1}}  >\n            <div className=\"column\">\n                <h4 className=\"ui header\" >3D model of forth rail bridge</h4>\n                <button className=\"ui primary button\" onClick={props.goToBridges}>View Model</button>\n            </div>\n            <div className=\"column\">\n                <h4 className=\"ui header\" >Pickable GeoJson ROS Model</h4>\n                <button className=\"ui primary button\" onClick={props.goToRos} >View Model</button>\n            </div>\n        </div>\n    )\n};\n\nexport default AboutBox;","import { ScenegraphLayer } from '@deck.gl/mesh-layers';\nimport { GeoJsonLayer } from \"deck.gl\";\n\nconst FORTH_ROAD_BRIDGE_URL = 'forth-road-bridge.json';\nexport default class LayersFactory {\n\n\n    getBridgesLayer = () => {\n\n        const bridgeSceneGraph = new ScenegraphLayer({\n            id: 'scenegraph-layer',\n            data: FORTH_ROAD_BRIDGE_URL,\n            pickable: true,\n            scenegraph: 'forth-rail-bridge.glb',\n            getPosition: d => {\n                console.log(d);\n                return d.coordinates;\n            },\n            getOrientation: d => [0, 105, 90],\n            sizeScale: 1.1,\n            _lighting: 'pbr',\n            getColor: c => [130, 0, 0, 200]\n        });\n\n        return bridgeSceneGraph;\n\n    }\n\n    getRosBuilding = (updateSelectedBuilding, getSelectedBuildingId) => {\n\n\n        const selectBuildingOrFloor = ({ object }) => {\n            console.log(object);\n            if (object) {\n              updateSelectedBuilding({ selectedBuildingId: object.properties.id, title: object.properties.info });\n            }\n          }\n      \n\n\n        const getBuildingElevation = (data) => {\n            let otherTags = data.properties.other_tags;\n            console.log(\"environment\");\n            console.log(process.env);\n            if (otherTags) {\n                console.log(data.properties.other_tags);\n                const extractBuildingHeight = /building:levels\"=>\"([0-9]+)/;\n                const match = otherTags.match(extractBuildingHeight);\n                if (match) {\n                    return Number(match[1]);\n                } else {\n                    return 1;\n                }\n            }\n\n        };\n        let i =100;\n        const rosBuilding = new GeoJsonLayer({\n            id: 'geojson',\n            data: 'edinburgh-buildings.json',\n            opacity: 0.8,\n            stroked: false,\n            filled: true,\n            extruded: true,\n            wireframe: true,\n            getElevation: d => {\n                return getBuildingElevation(d) * 3;\n            },\n            getFillColor: d => {\n\n                return d.properties.id === getSelectedBuildingId() ? [255, 36, 0] : [55, 205, 155]\n            },\n            updateTriggers: {\n                getFillColor: () => console.log(\"check fill\")\n            },\n            getLineColor: [255, 255, 255],\n            onClick: (event) => selectBuildingOrFloor(event),\n            pickable: true\n        })\n        return rosBuilding;\n    }\n\n}","import React, { useContext, setState, Component } from 'react';\nimport DeckGL from '@deck.gl/react';\n\nimport { StaticMap } from 'react-map-gl';\nimport InfoBox from './components/InfoBox'\nimport AboutBox from './components/AboutBox'\nimport { _MapContext as MapContext, NavigationControl } from 'react-map-gl';\n\nimport { registerLoaders } from '@loaders.gl/core';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport { useState, useCallback } from 'react';\nimport { FlyToInterpolator } from 'deck.gl';\nimport LayersFactory from \"./layers/LayersFactory\"\n\n\nregisterLoaders(GLTFLoader);\n\nconst MAPBOX_TOKEN = ''; // not require all opensource\n// mapbox style file path\n\n\nconst MAPBOX_STYLE_EDINBURGH = 'dev-style-edinburgh.json';\n\nexport default class App extends Component {\n  layersFactory = new LayersFactory();\n  state = {\n    title: \"Click on coloured buildings for info...\",\n    selectedBuildingId: null,\n    initialViewState: {\n      longitude: -3.1517904,\n      latitude: 55.9557288,\n      zoom: 16,\n      pitch: 60,\n      bearing: 0\n    },\n    layers: []\n  };\n\n\n\n\n\n  render() {\n\n    let mapStyle = MAPBOX_STYLE_EDINBURGH;\n\n    const goToBridges = () => {\n      this.setState({\n        initialViewState: {\n          longitude: -3.3878494935,\n          latitude: 55.9981315604,\n          zoom: 14,\n          pitch: 60,\n          bearing: 80,\n          transitionDuration: 5000,\n          transitionInterpolator: new FlyToInterpolator(),\n        },\n        layers: [this.layersFactory.getBridgesLayer() ]\n      })\n    };\n\n\n    const goToRos = () => {\n\n      const getSelectedBuildingId = () => {\n        return this.state.selectedBuildingId;\n      }\n      const updateSelectedBuilding = (buildingDetails) => {\n        this.setState(buildingDetails);\n        this.setState({layers: this.layersFactory.getRosBuilding(updateSelectedBuilding, getSelectedBuildingId)});\n  \n      };\n      \n      this.setState({\n        initialViewState: {\n          longitude: -3.1517904,\n          latitude: 55.9557288,\n          zoom: 16,\n          pitch: 60,\n          bearing: 0,\n          transitionDuration: 5000,\n          transitionInterpolator: new FlyToInterpolator()\n        },\n        layers: this.layersFactory.getRosBuilding(updateSelectedBuilding, getSelectedBuildingId)\n      });\n\n      \n      \n    };\n\n\n\n\n    return (\n      <div>\n        <AboutBox goToBridges={goToBridges} goToRos={goToRos} />\n        <DeckGL\n          initialViewState={this.state.initialViewState}\n          controller={true}\n          layers={[this.state.layers]}\n        >\n\n          <StaticMap\n            reuseMaps\n            mapStyle={mapStyle}\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          >\n\n            <InfoBox info={this.state} /></StaticMap>\n        </DeckGL>\n      </div>\n    );\n\n  }\n}\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}