{"version":3,"sources":["components/AboutBox.js","layers/LayersFactory.js","App.js","serviceWorker.js","index.js"],"names":["AboutBox","props","className","style","position","zIndex","onClick","goToBridges","goToRos","terrainMap","SURFACE_IMAGE","ELEVATION_DECODER","rScaler","gScaler","bScaler","offset","LayersFactory","TerrainLayer","id","minZoom","maxZoom","elevationDecoder","elevationData","texture","wireframe","color","ScenegraphLayer","data","pickable","scenegraph","getPosition","d","console","log","coordinates","getOrientation","sizeScale","_lighting","getColor","c","updateSelectedBuilding","getSelectedBuildingId","GeoJsonLayer","opacity","stroked","filled","extruded","getElevation","otherTags","properties","other_tags","match","Number","getBuildingElevation","getFillColor","updateTriggers","getLineColor","event","x","y","object","selectedBuildingInfo","selectedBuildingId","title","selectBuildingOrFloor","registerLoaders","GLTFLoader","App","layersFactory","state","initialViewState","longitude","latitude","zoom","pitch","bearing","maxPitch","layers","this","background","left","top","src","setState","process","transitionDuration","transitionInterpolator","FlyToInterpolator","getBridgesLayer","getRosBuilding","buildingDetails","getTerrainLayer","_renderPopup","controller","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d3b4f6b.chunk.js","sourcesContent":["import React from \"react\";\nimport '../App.css';\n\n\n\n\nconst AboutBox = (props) => {\n\n    return (\n\n        <div className=\"ui three column  raised padded text container segment grid\" style={{position: 'absolute', zIndex: 1}}  >\n            <div className=\"column\">\n                <h4 className=\"ui header\" >3D model of forth rail bridge</h4>\n                <button className=\"ui primary button\" onClick={props.goToBridges}>View Model</button>\n            </div>\n            <div className=\"column\">\n                <h4 className=\"ui header\" >Pickable GeoJson ROS Model</h4>\n                <button className=\"ui primary button\" onClick={props.goToRos} >View Model</button>\n            </div>\n            <div className=\"column\">\n                <h4 className=\"ui header\" >Terrain Map</h4>\n                <button className=\"ui primary button\" onClick={props.terrainMap} >View Model</button>\n            </div>\n        </div>\n    )\n};\n\nexport default AboutBox;","import { ScenegraphLayer } from '@deck.gl/mesh-layers';\nimport { GeoJsonLayer } from \"deck.gl\";\nimport {TerrainLayer} from '@deck.gl/geo-layers';\n\nconst FORTH_ROAD_BRIDGE_URL = 'forth-road-bridge.json';\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoibXVycmF5aGtpbmciLCJhIjoiZVVfeGhqNCJ9.WJaoPywqu21-rgRkQJqsKQ'; \nconst TERRAIN_IMAGE = `https://s3.amazonaws.com/elevation-tiles-prod/terrarium/{z}/{x}/{y}.png`;\nconst SURFACE_IMAGE = `https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?access_token=${MAPBOX_TOKEN}`;\nconst ELEVATION_DECODER = {\n    rScaler: 256,\n    gScaler: 1,\n    bScaler: 1/256,\n    offset: -32768\n  };\nexport default class LayersFactory {\n\n\n    getTerrainLayer(){\n\n        const terrainLayer = new TerrainLayer({\n            id: 'terrain',\n            minZoom: 0,\n            maxZoom: 23,\n            elevationDecoder: ELEVATION_DECODER,\n            elevationData: TERRAIN_IMAGE,\n            texture: SURFACE_IMAGE,\n            wireframe: false,\n            color: [255, 255, 255]\n          });\n\n        return terrainLayer;\n        \n    }\n\n\n    getBridgesLayer (){\n\n        const bridgeSceneGraph = new ScenegraphLayer({\n            id: 'scenegraph-layer',\n            data: FORTH_ROAD_BRIDGE_URL,\n            pickable: true,\n            scenegraph: 'forth-rail-bridge.glb',\n            getPosition: d => {\n                console.log(d);\n                return d.coordinates;\n            },\n            getOrientation: d => [0, 105, 90],\n            sizeScale: 1.1,\n            _lighting: 'pbr',\n            getColor: c => [130, 0, 0, 200]\n        });\n\n        return bridgeSceneGraph;\n\n    }\n\n    getRosBuilding (updateSelectedBuilding, getSelectedBuildingId){\n\n        const selectBuildingOrFloor = ({x, y, object}) => {\n            console.log(object);\n            if (object) {\n                \n              updateSelectedBuilding({selectedBuildingInfo:{ selectedBuildingId:object.properties.id, title: object.properties.title, x, y }});\n            }\n          }\n      \n\n\n        const getBuildingElevation = (data) => {\n            let otherTags = data.properties.other_tags;\n            if (otherTags) {\n                console.log(data.properties.other_tags);\n                const extractBuildingHeight = /building:levels\"=>\"([0-9]+)/;\n                const match = otherTags.match(extractBuildingHeight);\n                if (match) {\n                    return Number(match[1]);\n                } else {\n                    return 1;\n                }\n            }\n\n        };\n\n        const rosBuilding = new GeoJsonLayer({\n            id: 'geojson',\n            data: 'edinburgh-buildings.json',\n            opacity: 0.8,\n            stroked: false,\n            filled: true,\n            extruded: true,\n            wireframe: true,\n            getElevation: d => getBuildingElevation(d) * 3,\n            getFillColor: d => d.properties.id === getSelectedBuildingId() ? [255, 36, 0] : [55, 205, 155],\n            updateTriggers: {\n                getFillColor: () => console.log(\"check fill\")\n            },\n            getLineColor: [255, 255, 255],\n            onClick: (event) => selectBuildingOrFloor(event),\n            pickable: true\n        })\n        return rosBuilding;\n    }\n\n}","import React, { useContext, setState, Component } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport AboutBox from './components/AboutBox'\nimport MapGL from 'react-map-gl';\n\nimport { registerLoaders } from '@loaders.gl/core';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport { FlyToInterpolator } from 'deck.gl';\nimport LayersFactory from \"./layers/LayersFactory\"\n\n\nregisterLoaders(GLTFLoader);\n\nconst MAPBOX_TOKEN = ''; // not require all opensource\n// mapbox style file path\n\nexport default class App extends Component {\n  layersFactory = new LayersFactory();\n  state = {\n    title: \"Click on coloured buildings for info...\",\n    selectedBuildingInfo: null,\n    initialViewState: {\n      longitude: -3.1517904,\n      latitude: 55.9557288,\n      zoom: 16,\n      pitch: 60,\n      bearing: 0,\n      maxPitch: 89\n    },\n    layers: []\n  };\n\n\n\n  _renderPopup() {\n    return (\n      this.state.selectedBuildingInfo && (\n        <div className=\"ui card\" style={{\n          position: 'absolute', background: 'white',\n          left: this.state.selectedBuildingInfo.x, top: this.state.selectedBuildingInfo.y, zIndex: 100\n        }}>\n\n\n          <div className=\"image\">\n            <img src=\"./building-icon.png\" />\n          </div>\n          <div className=\"content\">\n            <div className=\"header\">{this.state.selectedBuildingInfo.title}</div>\n            <div className=\"description\">\n              What is Lorem Ipsum Lorem Ipsum is simply dummy text of the\n              printing and typesetting industry Lorem Ipsum has been the industry's standard dummy text ever since the\n            </div>\n          </div>\n          <div className=\"ui two bottom attached buttons\">\n            <div className=\"ui primary button\" onClick={() => this.setState({ selectedBuildingInfo: null })}>\n              <i className=\"close icon\"></i>\n              Close\n            </div>\n          </div>\n        </div>\n      )\n    );\n\n  }\n\n\n  render() {\n\n    console.log(\"environment\");\n    console.log(process.env);\n    let mapStyle = process.env.NODE_ENV === \"development\" ? 'dev-style-edinburgh.json' : 'style-edinburgh.json';\n    const goToBridges = () => {\n      this.setState({\n        selectedBuildingInfo: null,\n        initialViewState: {\n          longitude: -3.3878494935,\n          latitude: 55.9981315604,\n          zoom: 14,\n          pitch: 60,\n          bearing: 80,\n          transitionDuration: 5000,\n          transitionInterpolator: new FlyToInterpolator(),\n        },\n        layers: [this.layersFactory.getBridgesLayer()]\n      })\n    };\n\n    const terrainMap = () => {\n      this.setState({\n        initialViewState: {\n          longitude: -3.1517904,\n          latitude: 55.9557288,\n          zoom: 14,\n          pitch: 70,\n          bearing: 0,\n          maxPitch: 89,\n          transitionDuration: 5000,\n          transitionInterpolator: new FlyToInterpolator()\n        },\n        layers: this.layersFactory.getTerrainLayer()\n      });\n\n    }\n\n\n    const goToRos = () => {\n\n      const getSelectedBuildingId = () => {\n        return this.state.selectedBuildingInfo && this.state.selectedBuildingInfo.selectedBuildingId;\n      }\n      const updateSelectedBuilding = (buildingDetails) => {\n        this.setState(buildingDetails);\n        this.setState({ layers: this.layersFactory.getRosBuilding(updateSelectedBuilding, getSelectedBuildingId) });\n\n      };\n\n      this.setState({\n        initialViewState: {\n          longitude: -3.1517904,\n          latitude: 55.9557288,\n          zoom: 16,\n          pitch: 60,\n          bearing: 0,\n          transitionDuration: 5000,\n          transitionInterpolator: new FlyToInterpolator()\n        },\n        layers: this.layersFactory.getRosBuilding(updateSelectedBuilding, getSelectedBuildingId)\n      });\n    };\n\n\n\n    return (\n      <div>\n        <AboutBox goToBridges={goToBridges} goToRos={goToRos} terrainMap={terrainMap} />\n        {this._renderPopup()}\n        <DeckGL\n          initialViewState={this.state.initialViewState}\n          controller={true}\n          layers={[this.state.layers]}\n        >\n          <MapGL\n            reuseMaps\n            mapStyle={mapStyle}\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          >\n          </MapGL>\n        </DeckGL>\n      </div>\n    );\n\n  }\n}\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}